(()=>{"use strict";var t={630:t=>{t.exports=require("perf_hooks")}},e={};function r(i){var s=e[i];if(void 0!==s)return s.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,r),n.exports}var i={};(()=>{var t=i;Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;const e=r(630);t.Query=class{constructor(t={}){this._buildmsqlQueries=[],this._buildmsqlOptions=t}async poolQuery(t,e,r){const i=this.proxy(await t.getConnection());try{return await i.query(e,r)}catch(t){throw t}finally{await i.release()}}async poolQueryStream(t,e,r){const i=this.proxy(await t.getConnection());return i.queryStream(e,r).on("end",(async()=>{await i.release()}))}async poolBatch(t,e,r){const i=this.proxy(await t.getConnection());try{return await i.batch(e,r)}catch(t){throw t}finally{await i.release()}}async poolInsert(t,e,r,i){const s=this.proxy(await t.getConnection());try{return await s.insert(e,r,i)}catch(t){throw t}finally{await s.release()}}async poolUpdate(t,e,r,i,s){const n=this.proxy(await t.getConnection());try{return await n.update(e,r,i,s)}catch(t){throw t}finally{await n.release()}}_setConnection(t){this._buildmsqlConnection=t}proxy(t){return this._setConnection(t),new Proxy(t,{get:(t,e,r)=>Reflect.has(this,e)?Reflect.get(this,e,r):Reflect.get(t,e,r)})}async query(t,e){try{this._debugStart(t,e);const r=await this._buildmsqlConnection.query(t,e);return this._buildmsqlMeta=r.hasOwnProperty("meta")?r.meta:r,r}catch(t){throw t}finally{this._debugEnd()}}queryStream(t,e){return this._debugStart(t,e),this._buildmsqlConnection.queryStream(t,e).on("error",(async()=>{this._debugEnd()})).on("fields",(t=>{this._buildmsqlMeta=t})).on("end",(async()=>{this._debugEnd()}))}async batch(t,e){try{this._debugStart(t,e);const r=await this._buildmsqlConnection.batch(t,e);return this._buildmsqlMeta=r,r}catch(t){throw t}finally{this._debugEnd()}}getMeta(){return this._buildmsqlMeta}lastInsertId(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.insertId}affectedRows(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.affectedRows}warningStatus(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.warningStatus}quote(t){return this._buildmsqlConnection.escape(t)}async insert(t,e,r){const i=Array.isArray(e);(r=r||{}).returning=!0===r.returning?Object.keys(i?e[0]:e):r.returning,r.duplicate=!0===r.duplicate?Object.keys(i?e[0]:e):r.duplicate,r.chunk=r.chunk||(i?e.length:1);const s=r.replace?"REPLACE":"INSERT",n=r.ignore&&!r.replace?"IGNORE":"",a=Array.isArray(r.returning)&&r.returning.length?`RETURNING ${r.returning.join(", ")}`:"",o=Array.isArray(r.duplicate)&&r.duplicate.length&&!r.replace?`ON DUPLICATE KEY UPDATE ${r.duplicate.map((t=>`${t}=VALUES(${t})`)).join(", ")}`:"",l=`\n            ${s} ${n} ${t} (${i?Object.keys(e[0]).join(", "):Object.keys(e).join(", ")}) \n            VALUES (${i?Object.keys(e[0]).map((t=>`:${t}`)).join(", "):Object.keys(e).map((t=>`:${t}`)).join(", ")}) \n            ${o} \n            ${a};\n        `,u=r.chunk;let c;for(let r=0,s=i?e.length:1;r<s;r+=u){const s=i?e.slice(r,r+u):e;c=u>1?await this.batch({sql:l,namedPlaceholders:!0},s):await this.query({sql:l,namedPlaceholders:!0},s),this._buildmsqlConnection.emit("inserted",t,c)}return c}async update(t,e,r,i){i=i||{};const s=Object.keys(r).map((t=>`${t} = :${t}`)).join(", "),n=`UPDATE ${i.ignore?"IGNORE":""} ${t} SET ${s} WHERE ${e};`,a=await this.query({sql:n,namedPlaceholders:!0},r);return this._buildmsqlConnection.emit("updated",t,a),a}statistics(){return{count:this._buildmsqlQueries.length,time:Math.round(100*this._buildmsqlQueries.reduce(((t,e)=>t+e.time),0))/100,queries:this._buildmsqlQueries}}_debugStart(t,r){if(this._buildmsqlOptions.debug){let i="object"==typeof t?t.sql:t;r&&(Array.isArray(r)?r.map((t=>i=i.replace("?",this.quote(t)))):Object.keys(r).map((t=>i=i.replace(new RegExp(":"+t,"ig"),this.quote(r[t]))))),this._buildmsqlQueries.push({threadId:this._buildmsqlConnection.threadId,start:e.performance.now(),time:0,sql:i})}}_debugEnd(){if(this._buildmsqlOptions.debug){const t=this._buildmsqlQueries.pop();t&&t.start&&(t.time=Math.round(100*(e.performance.now()-t.start))/100,delete t.start,this._buildmsqlQueries.push(t))}}}})(),module.exports=i})();