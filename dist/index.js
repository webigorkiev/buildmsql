(()=>{"use strict";var t={630:t=>{t.exports=require("perf_hooks")}},e={};function s(i){var r=e[i];if(void 0!==r)return r.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,s),n.exports}var i={};(()=>{var t=i;Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;const e=s(630);t.Query=class{constructor(t={}){this._buildmsqlQueries=[],this._buildmsqlOptions=t}_setConnection(t){this._buildmsqlConnection=t}proxy(t){return this._setConnection(t),new Proxy(t,{get:(t,e,s)=>Reflect.has(this,e)?Reflect.get(this,e,s):Reflect.get(t,e,s)})}async query(t,e){try{this._debugStart(t,e);const s=await this._buildmsqlConnection.query(t,e);return this._buildmsqlMeta=s.hasOwnProperty("meta")?s.meta:s,s}catch(t){throw t}finally{this._debugEnd()}}async queryStream(t,e){return this._debugStart(t,e),this._buildmsqlConnection.queryStream(t,e).on("error",(async()=>{this._debugEnd()})).on("fields",(t=>{this._buildmsqlMeta=t})).on("end",(async()=>{this._debugEnd()}))}async batch(t,e){try{this._debugStart(t,e);const s=await this._buildmsqlConnection.batch(t,e);return this._buildmsqlMeta=s,s}catch(t){throw t}finally{this._debugEnd()}}getMeta(){return this._buildmsqlMeta}lastInsertId(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.insertId}affectedRows(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.affectedRows}warningStatus(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.warningStatus}quote(t){return this._buildmsqlConnection.escape(t)}async insert(t,e,s){const i=Array.isArray(e);(s=s||{}).returning=!0===s.returning?Object.keys(i?e[0]:e):s.returning,s.duplicate=!0===s.duplicate?Object.keys(i?e[0]:e):s.duplicate,s.chunk=s.chunk||(i?e.length:1);const r=s.replace?"REPLACE":"INSERT",n=s.ignore&&!s.replace?"IGNORE":"",a=Array.isArray(s.returning)&&s.returning.length?`RETURNING ${s.returning.join(", ")}`:"",u=Array.isArray(s.duplicate)&&s.duplicate.length&&!s.replace?`ON DUPLICATE KEY UPDATE ${s.duplicate.map((t=>`${t}=VALUES(${t})`)).join(", ")}`:"",l=`\n            ${r} ${n} ${t} (${i?Object.keys(e[0]).join(", "):Object.keys(e).join(", ")}) \n            VALUES (${i?Object.keys(e[0]).map((t=>`:${t}`)).join(", "):Object.keys(e).map((t=>`:${t}`)).join(", ")}) \n            ${u} \n            ${a};\n        `,o=s.chunk;let d;for(let s=0,r=i?e.length:1;s<r;s+=o){const r=i?e.slice(s,s+o):e;d=o>1?await this.batch({sql:l,namedPlaceholders:!0},r):await this.query({sql:l,namedPlaceholders:!0},r),this._buildmsqlConnection.emit("inserted",t,d)}return d}async update(t,e,s,i){i=i||{};const r=Object.keys(s).map((t=>`${t} = :${t}`)).join(", "),n=`UPDATE ${i.ignore?"IGNORE":""} ${t} SET ${r} WHERE ${e};`,a=await this.query({sql:n,namedPlaceholders:!0},s);return this._buildmsqlConnection.emit("updated",t,a),a}statistics(){return{count:this._buildmsqlQueries.length,time:Math.round(100*this._buildmsqlQueries.reduce(((t,e)=>t+e.time),0))/100,queries:this._buildmsqlQueries}}_debugStart(t,s){if(this._buildmsqlOptions.debug){let i="object"==typeof t?t.sql:t;s&&(Array.isArray(s)?s.map((t=>i=i.replace("?",this.quote(t)))):Object.keys(s).map((t=>i=i.replace(new RegExp(":"+t,"ig"),this.quote(s[t]))))),this._buildmsqlQueries.push({threadId:this._buildmsqlConnection.threadId,start:e.performance.now(),time:0,sql:i})}}_debugEnd(){if(this._buildmsqlOptions.debug){const t=this._buildmsqlQueries.pop();t&&t.start&&(t.time=Math.round(100*(e.performance.now()-t.start))/100,delete t.start,this._buildmsqlQueries.push(t))}}}})(),module.exports=i})();