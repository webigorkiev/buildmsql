(()=>{"use strict";var t={630:t=>{t.exports=require("perf_hooks")}},i={};function e(s){var r=i[s];if(void 0!==r)return r.exports;var n=i[s]={exports:{}};return t[s](n,n.exports,e),n.exports}var s={};(()=>{var t=s;Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;const i=e(630);t.Query=class{constructor(t={},i){this._buildmsqlQueries=[],this._buildmsqlOptions=t,this._buildmsqlPool=i}getPool(){if(void 0===this._buildmsqlPool)throw Error("pool is undefined");return this._buildmsqlPool}async getConnection(t,i){if(void 0===this._buildmsqlPool)throw Error("pool is undefined");return i=(t=t||this._buildmsqlOptions.pattern)||this._buildmsqlOptions.selector,await this._buildmsqlPool.getConnection(t,i)}async poolQuery(t,i){if(void 0===this._buildmsqlPool)throw Error("pool is undefined");const e=this.proxy(await this.getConnection());try{return await this.query(t,i)}catch(t){throw t}finally{await e.release()}}async poolQueryStream(t,i){if(void 0===this._buildmsqlPool)throw Error("pool is undefined");const e=this.proxy(await this.getConnection());return this.queryStream(t,i).on("end",(async()=>{await e.release()}))}async poolBatch(t,i){if(void 0===this._buildmsqlPool)throw Error("pool is undefined");const e=this.proxy(await this.getConnection());try{return await this.batch(t,i)}catch(t){throw t}finally{await e.release()}}async poolInsert(t,i,e){if(void 0===this._buildmsqlPool)throw Error("pool is undefined");const s=this.proxy(await this.getConnection());try{return await this.insert(t,i,e)}catch(t){throw t}finally{await s.release()}}async poolUpdate(t,i,e,s){if(void 0===this._buildmsqlPool)throw Error("pool is undefined");const r=this.proxy(await this.getConnection());try{return await this.update(t,i,e,s)}catch(t){throw t}finally{await r.release()}}_setConnection(t){this._buildmsqlConnection=t}proxy(t){return this._setConnection(t),new Proxy(t,{get:(t,i,e)=>Reflect.has(this,i)?Reflect.get(this,i,e):Reflect.get(t,i,e)})}async query(t,i){try{this._debugStart(t,i);const e=await this._buildmsqlConnection.query(t,i);return this._buildmsqlMeta=e.hasOwnProperty("meta")?e.meta:e,e}catch(t){throw t}finally{this._debugEnd()}}queryStream(t,i){return this._debugStart(t,i),this._buildmsqlConnection.queryStream(t,i).on("error",(async()=>{this._debugEnd()})).on("fields",(t=>{this._buildmsqlMeta=t})).on("end",(async()=>{this._debugEnd()}))}async batch(t,i){try{this._debugStart(t,i);const e=await this._buildmsqlConnection.batch(t,i);return this._buildmsqlMeta=e,e}catch(t){throw t}finally{this._debugEnd()}}async beginTransaction(){this._buildmsqlOptions.nativeTransactions?await this.query("\nSTART TRANSACTION"):await this._buildmsqlConnection.beginTransaction()}async rollback(){this._buildmsqlOptions.nativeTransactions?await this.query("\nROLLBACK"):await this._buildmsqlConnection.rollback()}async commit(){this._buildmsqlOptions.nativeTransactions?await this.query("\nCOMMIT"):await this._buildmsqlConnection.commit()}getMeta(){return this._buildmsqlMeta}lastInsertId(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.insertId}affectedRows(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.affectedRows}warningStatus(){return Array.isArray(this._buildmsqlMeta)?void 0:this._buildmsqlMeta.warningStatus}quote(t){return this._buildmsqlConnection.escape(t)}async insert(t,i,e){const s=Array.isArray(i);(e=e||{}).returning=!0===e.returning?Object.keys(s?i[0]:i):e.returning,e.duplicate=!0===e.duplicate?Object.keys(s?i[0]:i):e.duplicate,e.chunk=e.chunk||(s?i.length:1);const r=e.replace?"REPLACE":"INSERT",n=e.ignore&&!e.replace?"IGNORE":"",o=Array.isArray(e.returning)&&e.returning.length?`RETURNING ${e.returning.join(", ")}`:"",a=Array.isArray(e.duplicate)&&e.duplicate.length&&!e.replace?`ON DUPLICATE KEY UPDATE ${e.duplicate.map((t=>`${t}=VALUES(${t})`)).join(", ")}`:"",l=`\n            ${r} ${n} ${t} (${s?Object.keys(i[0]).join(", "):Object.keys(i).join(", ")}) \n            VALUES (${s?Object.keys(i[0]).map((t=>`:${t}`)).join(", "):Object.keys(i).map((t=>`:${t}`)).join(", ")}) \n            ${a} \n            ${o};\n        `,u=e.chunk;let d;for(let e=0,r=s?i.length:1;e<r;e+=u){const r=s?i.slice(e,e+u):i;d=u>1?await this.batch({sql:l,namedPlaceholders:!0},r):await this.query({sql:l,namedPlaceholders:!0},r),this._buildmsqlConnection.emit("inserted",t,d)}return d}async update(t,i,e,s){s=s||{};const r=Object.keys(e).map((t=>`${t} = :${t}`)).join(", "),n=`UPDATE ${s.ignore?"IGNORE":""} ${t} SET ${r} WHERE ${i};`,o=await this.query({sql:n,namedPlaceholders:!0},e);return this._buildmsqlConnection.emit("updated",t,o),o}statistics(){return{count:this._buildmsqlQueries.length,time:Math.round(100*this._buildmsqlQueries.reduce(((t,i)=>t+i.time),0))/100,queries:this._buildmsqlQueries}}_debugStart(t,e){if(this._buildmsqlOptions.debug){let s="object"==typeof t?t.sql:t;e&&(Array.isArray(e)?e.map((t=>s=s.replace("?",this.quote(t)))):Object.keys(e).map((t=>s=s.replace(new RegExp(":"+t,"ig"),this.quote(e[t]))))),this._buildmsqlQueries.push({threadId:this._buildmsqlConnection.threadId,start:i.performance.now(),time:0,sql:s})}}_debugEnd(){if(this._buildmsqlOptions.debug){const t=this._buildmsqlQueries.pop();t&&t.start&&(t.time=Math.round(100*(i.performance.now()-t.start))/100,delete t.start,this._buildmsqlQueries.push(t))}}}})(),module.exports=s})();